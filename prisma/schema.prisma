generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String                    @id @default(cuid())
  email                    String                    @unique
  username                 String                    @unique
  clerkId                  String                    @unique
  name                     String?
  bio                      String?
  image                    String?
  location                 String?
  website                  String?
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  isAdmin                  Boolean                   @default(false)
  lastLocationUpdate       DateTime?
  latitude                 Float?
  locationSharingEnabled   Boolean?                  @default(false)
  longitude                Float?
  barks                    Bark[]
  barkComments             BarkComment[]
  barkCommentVotes         BarkCommentVote[]
  barkVotes                BarkVote[]
  comments                 Comment[]
  communitiesCreated       Community[]               @relation("CommunityCreator")
  conversationParticipants ConversationParticipant[]
  following                Follows[]                 @relation("follower")
  followers                Follows[]                 @relation("following")
  likes                    Like[]
  messages                 Message[]
  notificationsCreated     Notification[]            @relation("notificationCreator")
  notifications            Notification[]            @relation("userNotifications")
  posts                    Post[]

  @@index([latitude, longitude])
  @@index([locationSharingEnabled, lastLocationUpdate])
}

model Post {
  id            String         @id @default(cuid())
  authorId      String
  petId         String?
  content       String?
  image         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  mediaType     String?
  affiliateCode String?
  affiliateLink String?
  category      String?
  condition     String?
  description   String?
  isAffiliate   Boolean?
  location      String?
  price         Float?
  priceType     String?
  title         String?
  type          PostType       @default(REGULAR)
  comments      Comment[]
  likes         Like[]
  notifications Notification[]
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  pet           Pet?           @relation("PetPosts", fields: [petId], references: [id])
}

model Comment {
  id            String         @id @default(cuid())
  content       String
  authorId      String
  postId        String
  createdAt     DateTime       @default(now())
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post          Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  notifications Notification[]

  @@index([authorId, postId])
}

model Like {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId, postId])
}

model Follows {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
  @@index([followerId, followingId])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  creatorId String
  type      NotificationType
  read      Boolean          @default(false)
  postId    String?
  commentId String?
  createdAt DateTime         @default(now())
  comment   Comment?         @relation(fields: [commentId], references: [id], onDelete: Cascade)
  creator   User             @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post      Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User             @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

enum Prestige {
  BRONZE
  SILVER
  GOLD
  LAPIS_LAZULI
  EMERALD
  PURPLE_AMETHYST
  RUBY
  DIAMOND
}

model Pet {
  id        String   @id @default(uuid())
  userId    String
  name      String
  species   String
  breed     String?
  age       String?
  bio       String?
  imageUrl  String?
  loveCount Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  streak    Int      @default(0)
  posts     Post[]   @relation("PetPosts")

  // Gamification fields
  xp         Int       @default(0)
  level      Int       @default(1)
  prestige   Prestige  @default(BRONZE)
  loginStreak Int      @default(0)
  lastLogin  DateTime?

  @@index([userId])
}

model Conversation {
  id           String                    @id @default(cuid())
  updatedAt    DateTime                  @updatedAt
  createdAt    DateTime                  @default(now())
  participants ConversationParticipant[]
  messages     Message[]
}

model ConversationParticipant {
  id             String       @id @default(cuid())
  userId         String
  conversationId String
  joinedAt       DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, conversationId])
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  senderId       String
  content        String
  read           Boolean      @default(false)
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User         @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model Community {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  creatorId   String?
  barks       Bark[]
  creator     User?    @relation("CommunityCreator", fields: [creatorId], references: [id])
}

model Bark {
  id          String        @id @default(cuid())
  title       String
  content     String
  authorId    String
  communityId String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  upvotes     Int           @default(0)
  author      User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  community   Community?    @relation(fields: [communityId], references: [id])
  comments    BarkComment[]
  votes       BarkVote[]
}

model BarkVote {
  id        String   @id @default(cuid())
  userId    String
  barkId    String
  value     Int
  createdAt DateTime @default(now())
  bark      Bark     @relation(fields: [barkId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, barkId])
}

model BarkComment {
  id        String            @id @default(cuid())
  content   String
  authorId  String
  barkId    String
  parentId  String?
  createdAt DateTime          @default(now())
  author    User              @relation(fields: [authorId], references: [id], onDelete: Cascade)
  bark      Bark              @relation(fields: [barkId], references: [id], onDelete: Cascade)
  parent    BarkComment?      @relation("CommentReplies", fields: [parentId], references: [id])
  replies   BarkComment[]     @relation("CommentReplies")
  votes     BarkCommentVote[]

  @@index([barkId])
  @@index([parentId])
}

model BarkCommentVote {
  id        String      @id @default(cuid())
  userId    String
  commentId String
  value     Int
  createdAt DateTime    @default(now())
  comment   BarkComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
}

enum PostType {
  REGULAR
  PRODUCT
  SERVICE
}
