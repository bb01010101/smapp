// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())
  email String @unique
  username String @unique
  clerkId String @unique
  name String?
  bio String?
  image String?
  location String?
  website String?
  createdAt DateTime @default(now())  // member since 2025
  updatedAt DateTime @updatedAt
  isAdmin Boolean @default(false)

  // Relations: 
  posts Post[] // One-to-many
  comments Comment[] // One-to-many
  likes Like[] // One-to-many

  followers Follows[] @relation("following") // users who follow this user
  following Follows[] @relation("follower")  // users this user follows

  notifications Notification[] @relation("userNotifications") // notifications received by a user
  notificationsCreated Notification[] @relation("notificationCreator") // notifications triggered by a user

  conversationParticipants ConversationParticipant[]
  messages                  Message[]
}


model Post {
  id          String   @id @default(cuid())
  authorId    String
  petId       String?
  content     String?
  image       String?
  mediaType   String?
  type        PostType @default(REGULAR)
  // Marketplace fields
  title       String?
  description String?
  price       Float?
  priceType   String? // for services: hourly, daily, fixed
  category    String?
  condition   String? // for products: new, used, etc.
  location    String?
  isAffiliate Boolean?
  affiliateLink String?
  affiliateCode String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  pet         Pet?     @relation("PetPosts", fields: [petId], references: [id])
  comments    Comment[]
  likes       Like[]
  notifications Notification[]
}

model Comment{
  id String @id @default(cuid())
  content String
  authorId String
  postId String
  createdAt DateTime @default(now())

  // Relations
  author User @relation(fields: [authorId],references: [id],onDelete: Cascade)
  post Post @relation(fields: [postId],references: [id], onDelete: Cascade)
  notifications Notification[]

  @@index([authorId,postId]) // composite index for faster queries
}

model Like {
  id        String    @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId,postId]) // composite index for faster queries
  @@unique([userId,postId]) // this prevents same user from liking post twice
}

model Follows{
  followerId String
  followingId String
  createdAt DateTime @default(now())

  // Relations
  follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@index([followerId,followingId]) // composite index for faster queries
  @@id([followerId,followingId]) // composite primary key prevents duplicate follows
}

model Notification {
  id        String   @id @default(cuid())
  userId    String                  
  creatorId String                  
  type      NotificationType        
  read      Boolean  @default(false)
  postId    String?                 
  commentId String?                
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
  creator   User     @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

enum NotificationType {
  LIKE     
  COMMENT 
  FOLLOW   
}

model Pet {
  id        String   @id @default(uuid())
  userId    String
  name      String
  species   String
  breed     String?
  age       String?
  bio       String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts     Post[]   @relation("PetPosts")

  @@index([userId])
}

enum PostType {
  REGULAR
  PRODUCT
  SERVICE
}

model Conversation {
  id           String    @id @default(cuid())
  participants ConversationParticipant[]
  messages     Message[]
  updatedAt    DateTime  @updatedAt
  createdAt    DateTime  @default(now())
}

model ConversationParticipant {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  joinedAt       DateTime @default(now())

  @@unique([userId, conversationId])
}

model Message {
  id             String      @id @default(cuid())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  sender         User        @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId       String
  content        String
  read           Boolean     @default(false)
  createdAt      DateTime    @default(now())
}
